#include <cassert>
#include <iostream>

#include "liblinalg.hh"

#define EXECUTE_TEST(test_func) \
    std::cout << "Executing " #test_func "... " << std::flush; \
    test_func(); \
    std::cout << "OK" << std::endl

void test_vector_comparisons() {
    vecf<2> a0= {7,1};
    vecf<2> b0= {7,1};
    assert((a0 == b0));
    vecf<8> a1= {4,1,0,1,0,5,3,1};
    vecf<8> b1= {4,1,0,1,0,5,3,1};
    assert((a1 == b1));
    vecf<16> a2= {4,3,8,7,2,0,8,0,7,4,0,1,7,7,5,0};
    vecf<16> b2= {4,3,8,7,2,0,8,0,7,4,0,1,7,7,5,0};
    assert((a2 == b2));
    vecf<22> a3= {5,5,3,5,5,8,7,1,6,5,1,0,1,5,8,0,0,5,4,8,1,4};
    vecf<22> b3= {5,5,3,5,5,8,7,1,6,5,1,0,1,5,8,0,0,5,4,8,1,4};
    assert((a3 == b3));
    vecf<32> a4= {7,2,7,3,2,6,4,7,1,1,4,6,8,2,0,3,7,2,3,1,7,6,1,7,7,3,6,4,2,0,1,2};
    vecf<32> b4= {7,2,7,3,2,6,4,7,1,1,4,6,8,2,0,3,7,2,3,1,7,6,1,7,7,3,6,4,2,0,1,2};
    assert((a4 == b4));
}
void test_vector_deep_copies() {
    vecf<2> a = {1, 2};
    auto b = a;
    b.data[0] = 7;
    assert((a.data[0]) == 1);
}
void test_vector_addition() {
    vecf<2> a0= {4,4};
    vecf<2> b0= {1,7};
    vecf<2> e0= { 5,11};
    auto r0 = a0 + b0;
    assert((r0 == e0));
    vecf<8> a1= {7,8,4,7,3,3,7,8};
    vecf<8> b1= {7,8,4,0,1,3,6,7};
    vecf<8> e1= {14,16, 8, 7, 4, 6,13,15};
    auto r1 = a1 + b1;
    assert((r1 == e1));
    vecf<16> a2= {3,7,0,7,6,5,2,3,4,3,5,3,6,3,3,3};
    vecf<16> b2= {7,8,8,0,8,2,1,6,2,5,0,2,4,6,0,6};
    vecf<16> e2= {10,15, 8, 7,14, 7, 3, 9, 6, 8, 5, 5,10, 9, 3, 9};
    auto r2 = a2 + b2;
    assert((r2 == e2));
    vecf<22> a3= {0,5,1,2,0,0,6,7,8,2,0,4,1,4,1,0,2,8,7,2,5,2};
    vecf<22> b3= {1,7,2,6,3,8,2,2,3,3,8,4,3,0,5,0,3,0,2,5,6,3};
    vecf<22> e3= { 1,12, 3, 8, 3, 8, 8, 9,11, 5, 8, 8, 4, 4, 6, 0, 5, 8, 9, 7,11, 5};
    auto r3 = a3 + b3;
    assert((r3 == e3));
    vecf<32> a4= {4,1,4,7,1,0,6,1,2,2,0,3,2,4,3,3,1,3,6,4,3,8,2,0,0,6,1,2,7,6,2,4};
    vecf<32> b4= {5,7,5,1,6,6,0,7,2,6,3,1,0,1,2,5,2,7,4,6,3,1,2,0,5,3,8,5,8,5,2,6};
    vecf<32> e4= { 9, 8, 9, 8, 7, 6, 6, 8, 4, 8, 3, 4, 2, 5, 5, 8, 3,10,10,10, 6, 9, 4, 0,
  5, 9, 9, 7,15,11, 4,10};
    auto r4 = a4 + b4;
    assert((r4 == e4));
}
void test_vector_substraction() {
    vecf<2> a0= {2,8};
    vecf<2> b0= {3,4};
    vecf<2> e0= {-1, 4};
    auto r0 = a0 - b0;
    assert((r0 == e0));
    vecf<8> a1= {3,7,3,0,0,1,7,0};
    vecf<8> b1= {3,5,6,4,1,8,7,3};
    vecf<8> e1= { 0, 2,-3,-4,-1,-7, 0,-3};
    auto r1 = a1 - b1;
    assert((r1 == e1));
    vecf<16> a2= {8,0,3,2,2,4,4,5,3,3,1,6,4,5,6,7};
    vecf<16> b2= {2,4,8,2,2,8,3,0,3,2,3,4,6,2,5,0};
    vecf<16> e2= { 6,-4,-5, 0, 0,-4, 1, 5, 0, 1,-2, 2,-2, 3, 1, 7};
    auto r2 = a2 - b2;
    assert((r2 == e2));
    vecf<22> a3= {0,0,7,1,1,6,5,4,3,7,3,3,2,0,0,3,7,8,3,5,1,2};
    vecf<22> b3= {0,6,4,8,8,4,5,5,6,4,0,2,1,0,3,6,1,3,0,8,7,2};
    vecf<22> e3= { 0,-6, 3,-7,-7, 2, 0,-1,-3, 3, 3, 1, 1, 0,-3,-3, 6, 5, 3,-3,-6, 0};
    auto r3 = a3 - b3;
    assert((r3 == e3));
    vecf<32> a4= {7,7,3,1,1,0,5,5,2,1,7,6,4,7,6,4,4,3,4,5,2,1,6,7,1,0,1,6,5,4,8,7};
    vecf<32> b4= {5,2,1,7,2,3,1,2,6,3,4,0,6,6,8,0,5,5,6,1,3,6,6,5,2,3,3,6,0,6,6,6};
    vecf<32> e4= { 2, 5, 2,-6,-1,-3, 4, 3,-4,-2, 3, 6,-2, 1,-2, 4,-1,-2,-2, 4,-1,-5, 0, 2,
 -1,-3,-2, 0, 5,-2, 2, 1};
    auto r4 = a4 - b4;
    assert((r4 == e4));
}
void test_vector_length() {
    vecf<2> a0= {4,6};
    float e0 = 52;
    auto r0 = length_squared(a0);
    assert((r0 == e0));
    vecf<8> a1= {7,8,0,3,7,4,6,4};
    float e1 = 239;
    auto r1 = length_squared(a1);
    assert((r1 == e1));
    vecf<16> a2= {8,3,6,4,4,6,0,3,0,6,8,6,3,2,1,7};
    float e2 = 385;
    auto r2 = length_squared(a2);
    assert((r2 == e2));
    vecf<22> a3= {0,7,5,3,7,6,4,6,6,5,7,4,5,3,3,5,0,3,2,1,5,4};
    float e3 = 469;
    auto r3 = length_squared(a3);
    assert((r3 == e3));
    vecf<32> a4= {6,8,5,3,8,1,0,4,5,8,1,1,4,4,1,5,8,8,5,3,4,7,2,5,7,0,7,5,0,4,2,7};
    float e4 = 812;
    auto r4 = length_squared(a4);
    assert((r4 == e4));
}
void test_vector_dotproduct() {
    vecf<2> a0= {3,8};
    vecf<2> b0= {4,3};
    float e0 = 36;
    auto r0 = dot(a0, b0);
    assert((r0 == e0));
    vecf<8> a1= {5,0,8,3,7,0,2,4};
    vecf<8> b1= {1,0,6,8,3,7,5,6};
    float e1 = 132;
    auto r1 = dot(a1, b1);
    assert((r1 == e1));
    vecf<16> a2= {2,1,2,2,1,8,2,1,0,8,4,7,2,0,5,3};
    vecf<16> b2= {3,7,4,5,3,8,0,5,6,2,8,0,5,6,7,2};
    float e2 = 202;
    auto r2 = dot(a2, b2);
    assert((r2 == e2));
    vecf<22> a3= {3,5,6,3,2,3,5,0,1,4,6,4,0,5,0,4,7,1,4,5,7,0};
    vecf<22> b3= {3,2,5,0,4,4,0,4,1,1,6,5,8,0,7,6,8,3,5,5,6,6};
    float e3 = 300;
    auto r3 = dot(a3, b3);
    assert((r3 == e3));
    vecf<32> a4= {2,0,8,3,8,6,8,0,6,6,5,4,6,3,5,7,4,4,3,5,5,7,4,1,0,2,4,7,5,6,5,7};
    vecf<32> b4= {8,1,0,8,1,8,4,1,3,5,5,7,5,4,1,5,4,1,3,2,3,3,1,1,4,8,1,4,5,0,5,3};
    float e4 = 510;
    auto r4 = dot(a4, b4);
    assert((r4 == e4));
}
void test_vector_multiplication() {
    vecf<2> a0= {8,6};
    vecf<2> b0= {7,0};
    vecf<2> e0= {56, 0};
    auto r0 = a0 * b0;
    assert((r0 == e0));
    vecf<8> a1= {4,5,0,6,6,3,6,6};
    vecf<8> b1= {7,2,2,5,3,4,8,1};
    vecf<8> e1= {28,10, 0,30,18,12,48, 6};
    auto r1 = a1 * b1;
    assert((r1 == e1));
    vecf<16> a2= {7,1,2,2,5,8,1,1,4,2,0,7,2,4,8,3};
    vecf<16> b2= {5,2,7,5,5,7,0,1,4,2,5,1,3,8,6,0};
    vecf<16> e2= {35, 2,14,10,25,56, 0, 1,16, 4, 0, 7, 6,32,48, 0};
    auto r2 = a2 * b2;
    assert((r2 == e2));
    vecf<22> a3= {4,5,8,6,8,7,4,3,5,3,5,5,5,3,7,5,2,2,8,3,6,8};
    vecf<22> b3= {8,4,7,5,5,7,0,8,3,6,2,8,0,7,2,1,6,6,3,5,6,3};
    vecf<22> e3= {32,20,56,30,40,49, 0,24,15,18,10,40, 0,21,14, 5,12,12,24,15,36,24};
    auto r3 = a3 * b3;
    assert((r3 == e3));
    vecf<32> a4= {4,1,0,5,3,0,8,0,8,6,7,0,0,5,4,3,3,8,2,2,5,7,1,2,8,7,1,8,1,3,1,6};
    vecf<32> b4= {0,1,0,8,1,2,0,2,8,4,5,6,8,8,6,0,7,2,7,8,3,7,3,2,3,2,4,5,7,1,5,2};
    vecf<32> e4= { 0, 1, 0,40, 3, 0, 0, 0,64,24,35, 0, 0,40,24, 0,21,16,14,16,15,49, 3, 4,
 24,14, 4,40, 7, 3, 5,12};
    auto r4 = a4 * b4;
    assert((r4 == e4));
}
void test_matrix_indexing() {
    matf<2, 2> a = {1, 2, 
                3, 4};
    assert((a(0, 1) == 2));
    matf<2, 4> b = {1, 2, 3, 4,
                    5, 6, 7, 8};
    assert((b(0, 3) == 4));
}
void test_matrix_deep_copies() {
    matf<2, 2> a = {1, 2, 
                    3, 4};
    matf<2, 2> b = a;
    b(0, 0) = 7;
    assert((a(0, 0) == 1));
}
void test_matrix_comparisons() {
    matf<2, 2> a0 = {5,3,6,3};
    matf<2, 2> b0 = {5,3,6,3};
    assert((a0 == b0));
    matf<2, 8> a1 = {2,1,7,7,3,4,4,2,0,6,0,3,5,1,3,1};
    matf<2, 8> b1 = {2,1,7,7,3,4,4,2,0,6,0,3,5,1,3,1};
    assert((a1 == b1));
    matf<2, 16> a2 = {6,4,8,7,2,7,4,1,8,0,2,0,2,3,4,2,0,7,8,3,1,6,3,2,0,3,1,7,1,3,1,0};
    matf<2, 16> b2 = {6,4,8,7,2,7,4,1,8,0,2,0,2,3,4,2,0,7,8,3,1,6,3,2,0,3,1,7,1,3,1,0};
    assert((a2 == b2));
    matf<2, 22> a3 = {3,4,7,1,5,4,6,8,8,4,8,8,4,6,6,1,1,4,1,6,1,5,3,6,8,8,1,1,1,1,4,8,3,2,6,1,7,
 5,6,6,2,1,2,1};
    matf<2, 22> b3 = {3,4,7,1,5,4,6,8,8,4,8,8,4,6,6,1,1,4,1,6,1,5,3,6,8,8,1,1,1,1,4,8,3,2,6,1,7,
 5,6,6,2,1,2,1};
    assert((a3 == b3));
    matf<2, 32> a4 = {4,6,0,8,0,7,3,8,6,0,7,5,7,6,1,5,5,8,6,2,2,3,6,4,3,0,0,7,3,4,7,4,0,6,6,5,4,
 3,5,3,6,5,8,2,5,0,7,5,6,6,3,2,2,7,1,8,4,1,7,7,4,8,1,0};
    matf<2, 32> b4 = {4,6,0,8,0,7,3,8,6,0,7,5,7,6,1,5,5,8,6,2,2,3,6,4,3,0,0,7,3,4,7,4,0,6,6,5,4,
 3,5,3,6,5,8,2,5,0,7,5,6,6,3,2,2,7,1,8,4,1,7,7,4,8,1,0};
    assert((a4 == b4));
    matf<8, 2> a5 = {8,3,2,6,8,6,1,2,8,3,5,5,8,4,8,0};
    matf<8, 2> b5 = {8,3,2,6,8,6,1,2,8,3,5,5,8,4,8,0};
    assert((a5 == b5));
    matf<8, 8> a6 = {5,3,1,0,1,0,6,7,7,5,6,8,4,0,0,2,8,3,3,5,5,2,0,5,0,1,0,4,5,3,8,7,6,4,3,4,4,
 3,1,7,3,3,6,6,0,3,1,7,0,1,2,1,6,0,6,6,4,6,1,5,0,0,2,4};
    matf<8, 8> b6 = {5,3,1,0,1,0,6,7,7,5,6,8,4,0,0,2,8,3,3,5,5,2,0,5,0,1,0,4,5,3,8,7,6,4,3,4,4,
 3,1,7,3,3,6,6,0,3,1,7,0,1,2,1,6,0,6,6,4,6,1,5,0,0,2,4};
    assert((a6 == b6));
    matf<8, 16> a7 = {1,2,8,2,5,1,4,0,1,1,8,6,0,1,4,0,2,1,4,7,0,3,7,3,5,0,4,1,1,3,3,7,8,7,0,2,7,
 0,7,1,7,3,0,8,5,5,5,8,5,0,5,5,2,0,8,6,7,5,5,4,8,6,5,5,1,8,5,2,5,8,2,0,8,0,
 0,5,7,1,0,4,0,6,4,6,6,0,2,5,7,3,0,5,3,2,1,6,5,6,7,7,1,0,8,2,8,6,7,2,3,1,5,
 3,3,3,7,6,5,4,7,4,1,3,1,6,2,5,6,3};
    matf<8, 16> b7 = {1,2,8,2,5,1,4,0,1,1,8,6,0,1,4,0,2,1,4,7,0,3,7,3,5,0,4,1,1,3,3,7,8,7,0,2,7,
 0,7,1,7,3,0,8,5,5,5,8,5,0,5,5,2,0,8,6,7,5,5,4,8,6,5,5,1,8,5,2,5,8,2,0,8,0,
 0,5,7,1,0,4,0,6,4,6,6,0,2,5,7,3,0,5,3,2,1,6,5,6,7,7,1,0,8,2,8,6,7,2,3,1,5,
 3,3,3,7,6,5,4,7,4,1,3,1,6,2,5,6,3};
    assert((a7 == b7));
    matf<8, 22> a8 = {5,5,3,1,2,1,1,8,3,7,5,3,1,1,6,0,3,1,7,3,4,8,8,2,5,0,3,2,1,1,7,7,6,4,3,0,7,
 1,6,8,2,8,3,0,2,4,5,0,3,5,7,6,2,5,1,2,8,5,0,4,7,8,0,3,8,4,3,4,1,6,7,7,6,7,
 7,3,4,3,5,7,0,2,0,0,3,1,7,6,5,4,4,0,2,3,3,4,8,5,6,3,2,1,2,2,8,3,2,5,5,0,8,
 3,3,3,0,1,3,5,4,5,0,5,6,2,0,1,5,3,0,7,3,4,5,1,6,4,2,4,0,2,2,5,6,7,4,1,5,5,
 1,3,2,4,5,0,3,6,1,6,7,6,7,1,8,0,7,6,8,4,8,6,5,5,1,5,7,0};
    matf<8, 22> b8 = {5,5,3,1,2,1,1,8,3,7,5,3,1,1,6,0,3,1,7,3,4,8,8,2,5,0,3,2,1,1,7,7,6,4,3,0,7,
 1,6,8,2,8,3,0,2,4,5,0,3,5,7,6,2,5,1,2,8,5,0,4,7,8,0,3,8,4,3,4,1,6,7,7,6,7,
 7,3,4,3,5,7,0,2,0,0,3,1,7,6,5,4,4,0,2,3,3,4,8,5,6,3,2,1,2,2,8,3,2,5,5,0,8,
 3,3,3,0,1,3,5,4,5,0,5,6,2,0,1,5,3,0,7,3,4,5,1,6,4,2,4,0,2,2,5,6,7,4,1,5,5,
 1,3,2,4,5,0,3,6,1,6,7,6,7,1,8,0,7,6,8,4,8,6,5,5,1,5,7,0};
    assert((a8 == b8));
    matf<8, 32> a9 = {0,2,0,7,5,7,5,6,4,0,4,1,4,7,0,2,2,1,4,0,2,3,0,7,4,6,3,6,6,2,0,5,5,3,0,6,7,
 3,4,2,8,4,0,1,3,4,6,3,3,4,5,7,5,3,1,1,8,3,8,3,3,3,3,2,0,5,5,3,8,0,6,7,3,8,
 4,3,0,7,6,3,3,5,1,8,3,1,1,0,4,5,3,1,4,7,4,1,3,1,6,2,3,3,1,6,3,3,7,8,3,6,1,
 8,5,8,4,0,8,6,0,5,4,3,5,3,1,0,0,3,8,5,5,4,4,4,8,4,0,4,7,8,7,5,2,6,2,0,1,8,
 1,5,6,6,6,6,7,0,8,1,8,6,3,5,6,8,4,8,8,1,3,4,7,8,2,1,4,2,4,4,4,1,4,8,3,2,0,
 6,7,5,2,5,6,7,0,5,8,5,6,8,1,8,8,6,8,4,6,2,2,1,7,7,6,6,8,1,2,6,4,0,7,5,8,0,
 4,3,1,0,8,7,8,2,6,3,4,7,2,4,6,0,2,4,3,4,5,7,4,5,3,4,0,0,4,5,6,1,5,6};
    matf<8, 32> b9 = {0,2,0,7,5,7,5,6,4,0,4,1,4,7,0,2,2,1,4,0,2,3,0,7,4,6,3,6,6,2,0,5,5,3,0,6,7,
 3,4,2,8,4,0,1,3,4,6,3,3,4,5,7,5,3,1,1,8,3,8,3,3,3,3,2,0,5,5,3,8,0,6,7,3,8,
 4,3,0,7,6,3,3,5,1,8,3,1,1,0,4,5,3,1,4,7,4,1,3,1,6,2,3,3,1,6,3,3,7,8,3,6,1,
 8,5,8,4,0,8,6,0,5,4,3,5,3,1,0,0,3,8,5,5,4,4,4,8,4,0,4,7,8,7,5,2,6,2,0,1,8,
 1,5,6,6,6,6,7,0,8,1,8,6,3,5,6,8,4,8,8,1,3,4,7,8,2,1,4,2,4,4,4,1,4,8,3,2,0,
 6,7,5,2,5,6,7,0,5,8,5,6,8,1,8,8,6,8,4,6,2,2,1,7,7,6,6,8,1,2,6,4,0,7,5,8,0,
 4,3,1,0,8,7,8,2,6,3,4,7,2,4,6,0,2,4,3,4,5,7,4,5,3,4,0,0,4,5,6,1,5,6};
    assert((a9 == b9));
    matf<16, 2> a10 = {1,7,5,7,3,0,8,0,6,6,0,0,3,0,2,0,8,4,3,2,6,4,1,7,7,0,1,7,0,5,1,0};
    matf<16, 2> b10 = {1,7,5,7,3,0,8,0,6,6,0,0,3,0,2,0,8,4,3,2,6,4,1,7,7,0,1,7,0,5,1,0};
    assert((a10 == b10));
    matf<16, 8> a11 = {1,0,2,0,3,5,0,5,6,4,4,1,5,7,4,4,8,8,4,4,6,7,1,6,7,3,3,0,2,7,3,0,8,5,7,4,4,
 8,3,7,0,1,1,1,3,4,3,4,5,8,2,3,8,7,6,7,7,7,4,0,2,4,7,6,8,5,6,8,6,8,2,7,1,4,
 0,6,5,5,8,6,1,0,5,5,8,4,5,0,6,1,8,2,7,8,0,0,3,6,1,5,2,3,3,6,3,8,1,4,4,5,7,
 7,7,1,4,6,2,3,0,6,4,3,0,7,4,5,8,7};
    matf<16, 8> b11 = {1,0,2,0,3,5,0,5,6,4,4,1,5,7,4,4,8,8,4,4,6,7,1,6,7,3,3,0,2,7,3,0,8,5,7,4,4,
 8,3,7,0,1,1,1,3,4,3,4,5,8,2,3,8,7,6,7,7,7,4,0,2,4,7,6,8,5,6,8,6,8,2,7,1,4,
 0,6,5,5,8,6,1,0,5,5,8,4,5,0,6,1,8,2,7,8,0,0,3,6,1,5,2,3,3,6,3,8,1,4,4,5,7,
 7,7,1,4,6,2,3,0,6,4,3,0,7,4,5,8,7};
    assert((a11 == b11));
    matf<16, 16> a12 = {5,2,6,6,4,6,0,3,1,6,1,2,6,6,0,8,5,6,3,1,5,3,3,1,4,2,7,2,4,2,4,3,5,7,0,8,1,
 2,2,7,8,4,6,6,8,8,8,6,4,1,8,2,7,1,0,1,7,5,6,1,1,2,8,3,7,0,5,0,5,0,3,3,4,0,
 3,6,4,3,0,4,1,6,8,1,3,0,4,8,8,5,1,2,5,0,8,6,7,5,4,3,8,6,5,7,4,5,6,5,8,0,8,
 3,1,6,3,4,3,8,3,4,5,2,4,2,5,5,8,4,7,6,2,7,4,0,5,1,2,6,2,0,1,4,0,1,2,0,4,6,
 3,0,6,6,5,6,0,0,0,7,8,0,3,4,1,2,6,0,7,8,5,2,4,8,6,6,0,7,8,6,3,0,7,4,4,7,6,
 7,2,1,5,3,7,0,0,7,4,1,8,2,1,3,4,6,5,4,5,8,4,8,5,6,5,3,8,3,2,2,5,5,3,0,8,3,
 1,0,3,4,5,3,2,6,4,5,8,7,5,1,4,3,3,7,5,2,5,6,5,6,7,4,8,7,5,0,6,4,6,1};
    matf<16, 16> b12 = {5,2,6,6,4,6,0,3,1,6,1,2,6,6,0,8,5,6,3,1,5,3,3,1,4,2,7,2,4,2,4,3,5,7,0,8,1,
 2,2,7,8,4,6,6,8,8,8,6,4,1,8,2,7,1,0,1,7,5,6,1,1,2,8,3,7,0,5,0,5,0,3,3,4,0,
 3,6,4,3,0,4,1,6,8,1,3,0,4,8,8,5,1,2,5,0,8,6,7,5,4,3,8,6,5,7,4,5,6,5,8,0,8,
 3,1,6,3,4,3,8,3,4,5,2,4,2,5,5,8,4,7,6,2,7,4,0,5,1,2,6,2,0,1,4,0,1,2,0,4,6,
 3,0,6,6,5,6,0,0,0,7,8,0,3,4,1,2,6,0,7,8,5,2,4,8,6,6,0,7,8,6,3,0,7,4,4,7,6,
 7,2,1,5,3,7,0,0,7,4,1,8,2,1,3,4,6,5,4,5,8,4,8,5,6,5,3,8,3,2,2,5,5,3,0,8,3,
 1,0,3,4,5,3,2,6,4,5,8,7,5,1,4,3,3,7,5,2,5,6,5,6,7,4,8,7,5,0,6,4,6,1};
    assert((a12 == b12));
    matf<16, 22> a13 = {6,4,7,1,0,7,1,7,2,1,8,0,8,4,0,4,3,1,8,8,4,1,4,2,6,6,1,8,1,5,2,8,1,3,7,5,0,
 3,7,6,1,3,0,5,4,0,6,7,6,7,4,3,1,6,8,1,4,4,3,4,2,4,6,5,7,0,2,7,3,2,5,4,0,0,
 4,2,7,5,8,8,1,7,6,4,0,6,5,7,2,7,5,3,1,2,6,6,4,6,0,5,8,3,3,7,6,7,1,2,6,2,3,
 5,7,3,4,2,8,8,7,7,8,6,5,6,8,7,6,2,1,6,6,6,1,0,5,4,8,8,7,1,3,1,5,5,4,2,5,1,
 7,6,1,8,3,3,0,5,1,6,3,7,5,0,5,7,8,7,6,2,1,1,3,3,3,7,3,8,6,3,1,3,4,8,7,0,2,
 5,3,5,7,6,2,5,7,7,7,5,3,0,5,3,6,0,0,1,0,4,7,6,1,6,1,0,4,7,2,3,3,2,5,5,6,8,
 6,1,5,4,5,1,3,6,5,7,5,5,4,8,2,2,3,5,5,0,1,3,3,5,4,6,6,2,3,2,0,4,7,7,3,0,1,
 0,2,5,2,7,3,0,6,0,6,2,8,0,5,8,5,6,7,7,4,8,6,5,6,3,7,3,5,3,3,2,2,5,7,5,7,7,
 4,1,2,6,6,1,6,7,5,5,4,5,2,0,8,1,0,4,0,6,3,6,6,4,7,4,2,1,6,1,0,2,0,0,3,3,1,
 5,2,4,1,5,0,1,6,4,3,3,0,6,1,4,7,4,0,6};
    matf<16, 22> b13 = {6,4,7,1,0,7,1,7,2,1,8,0,8,4,0,4,3,1,8,8,4,1,4,2,6,6,1,8,1,5,2,8,1,3,7,5,0,
 3,7,6,1,3,0,5,4,0,6,7,6,7,4,3,1,6,8,1,4,4,3,4,2,4,6,5,7,0,2,7,3,2,5,4,0,0,
 4,2,7,5,8,8,1,7,6,4,0,6,5,7,2,7,5,3,1,2,6,6,4,6,0,5,8,3,3,7,6,7,1,2,6,2,3,
 5,7,3,4,2,8,8,7,7,8,6,5,6,8,7,6,2,1,6,6,6,1,0,5,4,8,8,7,1,3,1,5,5,4,2,5,1,
 7,6,1,8,3,3,0,5,1,6,3,7,5,0,5,7,8,7,6,2,1,1,3,3,3,7,3,8,6,3,1,3,4,8,7,0,2,
 5,3,5,7,6,2,5,7,7,7,5,3,0,5,3,6,0,0,1,0,4,7,6,1,6,1,0,4,7,2,3,3,2,5,5,6,8,
 6,1,5,4,5,1,3,6,5,7,5,5,4,8,2,2,3,5,5,0,1,3,3,5,4,6,6,2,3,2,0,4,7,7,3,0,1,
 0,2,5,2,7,3,0,6,0,6,2,8,0,5,8,5,6,7,7,4,8,6,5,6,3,7,3,5,3,3,2,2,5,7,5,7,7,
 4,1,2,6,6,1,6,7,5,5,4,5,2,0,8,1,0,4,0,6,3,6,6,4,7,4,2,1,6,1,0,2,0,0,3,3,1,
 5,2,4,1,5,0,1,6,4,3,3,0,6,1,4,7,4,0,6};
    assert((a13 == b13));
    matf<16, 32> a14 = {7,1,1,1,1,1,2,4,7,6,6,4,1,8,7,6,0,5,1,5,6,8,5,1,2,6,3,8,3,7,5,7,0,3,6,7,7,
 8,0,7,0,5,8,6,7,7,1,2,1,2,1,0,3,6,2,5,1,5,8,6,7,2,7,8,0,6,0,3,1,7,2,6,5,5,
 8,1,8,2,8,8,4,3,0,8,3,4,4,8,6,1,3,5,5,7,4,3,1,1,2,1,8,0,1,8,6,1,6,2,8,8,6,
 5,8,7,5,2,7,3,6,2,6,1,2,8,5,7,6,5,7,0,7,5,1,2,7,4,2,1,4,1,8,3,1,4,3,1,1,0,
 5,2,8,6,0,8,5,3,2,4,3,4,5,0,7,2,5,4,2,5,0,8,8,3,2,1,8,7,8,8,4,8,3,7,7,0,3,
 2,7,8,0,2,7,8,1,2,1,5,3,4,6,0,8,4,7,0,4,5,4,1,8,6,1,2,6,2,7,5,2,2,5,3,8,4,
 6,4,1,6,7,2,4,5,4,2,8,1,2,6,3,0,0,7,7,2,1,4,3,7,6,8,3,4,7,3,2,3,5,3,1,0,3,
 5,3,6,1,7,0,2,1,0,4,7,4,3,4,2,7,3,2,8,5,3,7,5,6,7,0,4,3,4,7,4,6,5,2,1,1,1,
 8,6,8,4,6,7,2,0,7,8,0,1,5,8,4,6,6,7,4,0,1,6,0,5,8,2,3,0,5,2,4,1,1,3,4,6,4,
 3,6,5,4,0,0,5,2,7,8,3,4,5,4,6,8,7,7,0,8,3,8,7,8,7,2,8,6,6,7,0,4,8,4,8,7,0,
 1,8,0,4,3,4,6,8,5,1,3,6,8,2,4,6,2,5,6,6,8,5,4,2,7,5,5,0,2,0,8,1,5,3,8,8,6,
 5,8,8,4,0,4,4,1,5,3,3,2,3,8,8,1,0,5,3,7,2,3,0,2,7,7,8,1,0,7,7,3,2,6,4,4,5,
 2,3,1,3,8,3,2,8,1,4,5,0,1,5,2,4,1,4,4,8,7,3,7,5,6,8,1,6,7,2,7,6,6,2,2,5,7,
 0,5,7,3,0,2,6,6,6,5,6,3,7,4,1,3,2,6,7,8,3,2,0,4,3,7,6,4,5,8,7};
    matf<16, 32> b14 = {7,1,1,1,1,1,2,4,7,6,6,4,1,8,7,6,0,5,1,5,6,8,5,1,2,6,3,8,3,7,5,7,0,3,6,7,7,
 8,0,7,0,5,8,6,7,7,1,2,1,2,1,0,3,6,2,5,1,5,8,6,7,2,7,8,0,6,0,3,1,7,2,6,5,5,
 8,1,8,2,8,8,4,3,0,8,3,4,4,8,6,1,3,5,5,7,4,3,1,1,2,1,8,0,1,8,6,1,6,2,8,8,6,
 5,8,7,5,2,7,3,6,2,6,1,2,8,5,7,6,5,7,0,7,5,1,2,7,4,2,1,4,1,8,3,1,4,3,1,1,0,
 5,2,8,6,0,8,5,3,2,4,3,4,5,0,7,2,5,4,2,5,0,8,8,3,2,1,8,7,8,8,4,8,3,7,7,0,3,
 2,7,8,0,2,7,8,1,2,1,5,3,4,6,0,8,4,7,0,4,5,4,1,8,6,1,2,6,2,7,5,2,2,5,3,8,4,
 6,4,1,6,7,2,4,5,4,2,8,1,2,6,3,0,0,7,7,2,1,4,3,7,6,8,3,4,7,3,2,3,5,3,1,0,3,
 5,3,6,1,7,0,2,1,0,4,7,4,3,4,2,7,3,2,8,5,3,7,5,6,7,0,4,3,4,7,4,6,5,2,1,1,1,
 8,6,8,4,6,7,2,0,7,8,0,1,5,8,4,6,6,7,4,0,1,6,0,5,8,2,3,0,5,2,4,1,1,3,4,6,4,
 3,6,5,4,0,0,5,2,7,8,3,4,5,4,6,8,7,7,0,8,3,8,7,8,7,2,8,6,6,7,0,4,8,4,8,7,0,
 1,8,0,4,3,4,6,8,5,1,3,6,8,2,4,6,2,5,6,6,8,5,4,2,7,5,5,0,2,0,8,1,5,3,8,8,6,
 5,8,8,4,0,4,4,1,5,3,3,2,3,8,8,1,0,5,3,7,2,3,0,2,7,7,8,1,0,7,7,3,2,6,4,4,5,
 2,3,1,3,8,3,2,8,1,4,5,0,1,5,2,4,1,4,4,8,7,3,7,5,6,8,1,6,7,2,7,6,6,2,2,5,7,
 0,5,7,3,0,2,6,6,6,5,6,3,7,4,1,3,2,6,7,8,3,2,0,4,3,7,6,4,5,8,7};
    assert((a14 == b14));
    matf<22, 2> a15 = {6,2,1,6,0,8,6,5,0,4,6,6,8,4,3,2,6,5,5,1,2,0,0,0,0,6,6,5,8,7,0,2,3,7,8,8,5,
 8,7,5,8,4,4,3};
    matf<22, 2> b15 = {6,2,1,6,0,8,6,5,0,4,6,6,8,4,3,2,6,5,5,1,2,0,0,0,0,6,6,5,8,7,0,2,3,7,8,8,5,
 8,7,5,8,4,4,3};
    assert((a15 == b15));
    matf<22, 8> a16 = {1,0,3,8,5,1,8,2,3,4,1,0,0,1,0,6,5,0,1,7,6,0,1,4,2,3,7,3,0,6,6,1,5,7,3,5,1,
 0,6,3,7,4,1,2,1,0,8,1,7,4,2,2,6,0,4,1,1,7,8,4,4,4,1,3,6,3,8,4,0,5,6,8,4,2,
 5,7,1,6,6,6,2,1,0,7,5,3,7,2,1,3,3,1,1,1,8,5,4,5,4,2,4,1,8,2,3,5,2,0,4,8,0,
 2,4,2,4,5,5,1,4,7,7,6,2,2,2,7,8,0,2,2,1,1,8,2,6,3,5,6,5,7,2,0,4,7,0,6,3,4,
 1,7,4,7,7,6,6,0,3,4,8,0,6,6,2,2,6,6,0,4,1,0,3,3,8,6,5,4};
    matf<22, 8> b16 = {1,0,3,8,5,1,8,2,3,4,1,0,0,1,0,6,5,0,1,7,6,0,1,4,2,3,7,3,0,6,6,1,5,7,3,5,1,
 0,6,3,7,4,1,2,1,0,8,1,7,4,2,2,6,0,4,1,1,7,8,4,4,4,1,3,6,3,8,4,0,5,6,8,4,2,
 5,7,1,6,6,6,2,1,0,7,5,3,7,2,1,3,3,1,1,1,8,5,4,5,4,2,4,1,8,2,3,5,2,0,4,8,0,
 2,4,2,4,5,5,1,4,7,7,6,2,2,2,7,8,0,2,2,1,1,8,2,6,3,5,6,5,7,2,0,4,7,0,6,3,4,
 1,7,4,7,7,6,6,0,3,4,8,0,6,6,2,2,6,6,0,4,1,0,3,3,8,6,5,4};
    assert((a16 == b16));
    matf<22, 16> a17 = {3,8,0,6,5,3,8,4,0,2,6,3,8,0,1,0,2,0,4,4,1,3,3,5,6,8,6,7,5,8,3,0,1,7,1,3,1,
 7,4,1,3,6,6,7,7,7,6,0,1,1,7,6,5,7,7,8,7,7,0,8,3,1,7,2,7,6,2,3,3,4,2,2,1,1,
 2,1,2,5,7,4,4,2,6,2,3,2,8,3,0,0,2,5,3,3,4,0,7,8,3,1,4,2,3,8,1,7,7,6,4,1,0,
 2,0,5,8,8,6,0,3,1,1,5,6,1,7,0,4,8,1,5,8,7,8,4,8,7,7,8,3,2,4,0,2,0,6,7,3,5,
 4,1,7,2,7,4,3,6,8,6,7,0,6,1,4,4,6,0,3,3,2,3,0,2,8,3,1,2,8,4,2,4,4,0,7,3,8,
 7,2,7,5,3,8,3,7,3,1,7,1,7,1,1,3,5,2,1,4,0,5,4,4,2,0,8,7,4,1,3,8,5,3,3,4,6,
 8,8,1,6,6,4,0,6,2,0,4,6,5,8,2,7,2,2,1,1,1,8,4,6,2,8,5,0,5,1,2,1,7,5,7,7,0,
 1,0,3,5,5,8,8,6,3,5,4,6,7,4,4,4,6,2,1,2,1,0,2,6,6,3,7,0,0,7,5,2,5,1,5,0,1,
 3,3,4,3,3,4,7,3,6,7,1,3,7,8,2,6,2,8,7,1,0,4,5,6,7,0,7,3,0,1,6,6,0,8,2,4,5,
 1,5,0,0,6,5,6,0,7,0,8,0,0,4,5,5,2,3,7};
    matf<22, 16> b17 = {3,8,0,6,5,3,8,4,0,2,6,3,8,0,1,0,2,0,4,4,1,3,3,5,6,8,6,7,5,8,3,0,1,7,1,3,1,
 7,4,1,3,6,6,7,7,7,6,0,1,1,7,6,5,7,7,8,7,7,0,8,3,1,7,2,7,6,2,3,3,4,2,2,1,1,
 2,1,2,5,7,4,4,2,6,2,3,2,8,3,0,0,2,5,3,3,4,0,7,8,3,1,4,2,3,8,1,7,7,6,4,1,0,
 2,0,5,8,8,6,0,3,1,1,5,6,1,7,0,4,8,1,5,8,7,8,4,8,7,7,8,3,2,4,0,2,0,6,7,3,5,
 4,1,7,2,7,4,3,6,8,6,7,0,6,1,4,4,6,0,3,3,2,3,0,2,8,3,1,2,8,4,2,4,4,0,7,3,8,
 7,2,7,5,3,8,3,7,3,1,7,1,7,1,1,3,5,2,1,4,0,5,4,4,2,0,8,7,4,1,3,8,5,3,3,4,6,
 8,8,1,6,6,4,0,6,2,0,4,6,5,8,2,7,2,2,1,1,1,8,4,6,2,8,5,0,5,1,2,1,7,5,7,7,0,
 1,0,3,5,5,8,8,6,3,5,4,6,7,4,4,4,6,2,1,2,1,0,2,6,6,3,7,0,0,7,5,2,5,1,5,0,1,
 3,3,4,3,3,4,7,3,6,7,1,3,7,8,2,6,2,8,7,1,0,4,5,6,7,0,7,3,0,1,6,6,0,8,2,4,5,
 1,5,0,0,6,5,6,0,7,0,8,0,0,4,5,5,2,3,7};
    assert((a17 == b17));
    matf<22, 22> a18 = {8,3,4,3,1,4,6,4,3,3,4,4,1,5,2,4,8,8,6,7,0,2,5,1,8,0,8,8,0,2,5,2,6,1,0,1,0,
 0,6,0,4,8,4,3,8,0,4,2,1,5,8,2,0,7,0,3,4,7,8,3,7,8,6,2,8,3,0,3,8,7,8,7,1,0,
 2,4,7,1,1,7,8,0,7,5,2,1,7,6,4,0,2,0,0,1,6,7,1,5,2,6,7,8,1,8,1,5,4,8,7,5,2,
 3,2,0,2,3,0,0,8,4,8,2,8,1,3,7,8,0,8,3,5,2,6,1,7,3,3,2,0,2,3,1,8,5,6,4,3,3,
 3,5,8,1,5,8,6,3,6,8,2,1,4,2,5,6,3,7,8,0,7,5,2,7,4,8,7,4,3,5,0,8,6,7,2,1,4,
 4,6,3,8,3,6,8,2,2,6,1,3,8,5,1,0,6,1,7,8,3,3,8,3,4,3,4,4,1,2,3,7,0,2,1,5,6,
 2,3,8,0,3,3,8,3,4,5,1,1,5,6,5,2,6,4,4,4,0,2,7,7,7,7,1,1,7,2,6,2,2,1,8,0,0,
 4,5,1,0,6,8,3,0,5,0,2,5,8,4,2,1,2,4,5,1,1,6,5,8,4,2,2,6,1,1,4,1,8,4,7,6,2,
 4,1,8,8,3,6,8,2,8,0,1,1,1,4,8,1,8,4,0,6,8,0,3,6,1,4,1,2,8,0,6,6,8,6,7,6,0,
 3,7,2,2,5,4,1,5,1,7,2,5,2,5,1,7,0,2,1,3,5,8,8,0,0,1,1,8,2,1,2,2,6,8,5,2,5,
 3,6,2,4,8,0,2,2,0,4,7,1,8,6,6,8,4,7,1,0,5,2,2,3,6,1,3,6,3,5,6,7,8,7,4,3,3,
 8,4,2,0,3,4,8,0,8,7,1,4,6,3,0,4,5,5,0,4,0,0,2,0,4,6,7,0,3,6,2,7,5,0,2,7,8,
 7,4,0,8,5,6,6,7,3,2,6,6,7,3,2,0,8,4,2,4,5,4,4,4,4,7,2,5,3,0,7,7,7,2,3,5,4,
 1,1,5};
    matf<22, 22> b18 = {8,3,4,3,1,4,6,4,3,3,4,4,1,5,2,4,8,8,6,7,0,2,5,1,8,0,8,8,0,2,5,2,6,1,0,1,0,
 0,6,0,4,8,4,3,8,0,4,2,1,5,8,2,0,7,0,3,4,7,8,3,7,8,6,2,8,3,0,3,8,7,8,7,1,0,
 2,4,7,1,1,7,8,0,7,5,2,1,7,6,4,0,2,0,0,1,6,7,1,5,2,6,7,8,1,8,1,5,4,8,7,5,2,
 3,2,0,2,3,0,0,8,4,8,2,8,1,3,7,8,0,8,3,5,2,6,1,7,3,3,2,0,2,3,1,8,5,6,4,3,3,
 3,5,8,1,5,8,6,3,6,8,2,1,4,2,5,6,3,7,8,0,7,5,2,7,4,8,7,4,3,5,0,8,6,7,2,1,4,
 4,6,3,8,3,6,8,2,2,6,1,3,8,5,1,0,6,1,7,8,3,3,8,3,4,3,4,4,1,2,3,7,0,2,1,5,6,
 2,3,8,0,3,3,8,3,4,5,1,1,5,6,5,2,6,4,4,4,0,2,7,7,7,7,1,1,7,2,6,2,2,1,8,0,0,
 4,5,1,0,6,8,3,0,5,0,2,5,8,4,2,1,2,4,5,1,1,6,5,8,4,2,2,6,1,1,4,1,8,4,7,6,2,
 4,1,8,8,3,6,8,2,8,0,1,1,1,4,8,1,8,4,0,6,8,0,3,6,1,4,1,2,8,0,6,6,8,6,7,6,0,
 3,7,2,2,5,4,1,5,1,7,2,5,2,5,1,7,0,2,1,3,5,8,8,0,0,1,1,8,2,1,2,2,6,8,5,2,5,
 3,6,2,4,8,0,2,2,0,4,7,1,8,6,6,8,4,7,1,0,5,2,2,3,6,1,3,6,3,5,6,7,8,7,4,3,3,
 8,4,2,0,3,4,8,0,8,7,1,4,6,3,0,4,5,5,0,4,0,0,2,0,4,6,7,0,3,6,2,7,5,0,2,7,8,
 7,4,0,8,5,6,6,7,3,2,6,6,7,3,2,0,8,4,2,4,5,4,4,4,4,7,2,5,3,0,7,7,7,2,3,5,4,
 1,1,5};
    assert((a18 == b18));
    matf<22, 32> a19 = {6,8,7,5,3,1,2,1,8,3,5,3,3,6,8,3,5,6,1,8,3,3,4,2,6,8,7,4,4,3,7,2,8,8,7,5,7,
 3,0,8,8,3,5,8,6,5,5,0,1,6,0,2,3,4,1,1,1,2,0,1,3,2,5,0,2,4,2,6,8,6,3,8,2,8,
 6,7,8,7,5,2,2,5,6,8,0,2,3,4,1,0,1,3,0,7,2,0,6,8,7,0,7,1,1,7,7,0,0,4,0,8,1,
 0,8,1,7,2,3,4,0,0,5,2,1,8,6,3,3,0,3,6,8,0,3,1,7,4,7,1,8,2,2,4,7,8,7,2,6,0,
 8,7,2,7,6,7,0,5,0,0,1,4,2,5,0,6,1,1,6,8,0,4,3,7,7,8,2,3,3,4,5,8,6,7,4,2,8,
 2,2,2,0,0,2,7,7,5,1,6,8,6,7,0,8,5,4,1,4,2,2,7,8,8,3,4,0,2,6,0,8,7,8,7,6,2,
 4,3,3,5,8,1,7,0,3,8,4,8,3,6,4,6,6,2,5,1,8,2,6,8,2,0,1,3,2,3,5,5,6,7,4,5,7,
 0,5,0,4,8,1,5,7,8,4,5,7,0,1,0,0,6,5,8,5,1,8,4,8,8,3,5,3,3,7,0,7,6,5,0,4,7,
 7,8,0,3,0,8,7,1,2,3,0,1,3,5,0,8,8,2,3,0,0,7,2,5,7,0,2,1,2,4,3,0,0,8,5,3,8,
 5,0,3,3,7,6,2,6,0,1,4,0,6,3,0,0,6,2,6,7,8,5,7,2,3,8,3,7,4,5,1,4,5,6,3,7,2,
 3,5,0,1,0,5,2,0,0,4,8,4,4,4,4,7,5,4,3,4,8,0,2,0,7,5,2,2,6,4,4,3,3,2,3,4,5,
 6,2,6,8,7,5,5,3,4,0,0,8,0,8,0,7,4,8,1,6,0,2,7,3,3,8,0,3,5,4,8,1,1,7,3,6,2,
 3,5,5,6,7,3,7,8,4,8,0,2,5,3,4,4,8,2,8,3,6,2,5,2,2,7,0,0,1,1,6,4,3,7,3,4,2,
 6,5,6,5,6,7,1,0,4,6,8,5,4,7,3,4,6,1,4,2,0,3,2,8,1,3,2,7,3,5,6,6,8,5,0,8,5,
 1,1,7,4,7,5,6,7,1,1,1,1,3,3,4,6,6,6,3,6,0,2,6,0,6,0,4,0,1,7,4,3,7,2,6,4,7,
 6,1,4,1,4,2,6,4,8,1,1,0,2,1,3,5,6,3,3,7,0,5,0,5,4,8,7,7,3,6,6,7,0,4,3,4,5,
 8,2,3,7,5,6,1,4,8,6,6,0,6,5,7,3,5,1,5,7,4,5,6,4,1,0,3,0,6,8,7,7,1,2,8,0,5,
 0,2,5,2,3,2,7,6,2,0,7,5,4,6,4,5,4,4,2,2,7,4,2,2,1,2,2,0,3,1,7,6,3,3,5,1,4,
 4,5,5,1,6,2,6,5,3,1,5,5,5,6,8,2,1,6,0,8,8,3,6,7,5,2,3,6,0,5,6,5,4,3,4,8,5,
 6};
    matf<22, 32> b19 = {6,8,7,5,3,1,2,1,8,3,5,3,3,6,8,3,5,6,1,8,3,3,4,2,6,8,7,4,4,3,7,2,8,8,7,5,7,
 3,0,8,8,3,5,8,6,5,5,0,1,6,0,2,3,4,1,1,1,2,0,1,3,2,5,0,2,4,2,6,8,6,3,8,2,8,
 6,7,8,7,5,2,2,5,6,8,0,2,3,4,1,0,1,3,0,7,2,0,6,8,7,0,7,1,1,7,7,0,0,4,0,8,1,
 0,8,1,7,2,3,4,0,0,5,2,1,8,6,3,3,0,3,6,8,0,3,1,7,4,7,1,8,2,2,4,7,8,7,2,6,0,
 8,7,2,7,6,7,0,5,0,0,1,4,2,5,0,6,1,1,6,8,0,4,3,7,7,8,2,3,3,4,5,8,6,7,4,2,8,
 2,2,2,0,0,2,7,7,5,1,6,8,6,7,0,8,5,4,1,4,2,2,7,8,8,3,4,0,2,6,0,8,7,8,7,6,2,
 4,3,3,5,8,1,7,0,3,8,4,8,3,6,4,6,6,2,5,1,8,2,6,8,2,0,1,3,2,3,5,5,6,7,4,5,7,
 0,5,0,4,8,1,5,7,8,4,5,7,0,1,0,0,6,5,8,5,1,8,4,8,8,3,5,3,3,7,0,7,6,5,0,4,7,
 7,8,0,3,0,8,7,1,2,3,0,1,3,5,0,8,8,2,3,0,0,7,2,5,7,0,2,1,2,4,3,0,0,8,5,3,8,
 5,0,3,3,7,6,2,6,0,1,4,0,6,3,0,0,6,2,6,7,8,5,7,2,3,8,3,7,4,5,1,4,5,6,3,7,2,
 3,5,0,1,0,5,2,0,0,4,8,4,4,4,4,7,5,4,3,4,8,0,2,0,7,5,2,2,6,4,4,3,3,2,3,4,5,
 6,2,6,8,7,5,5,3,4,0,0,8,0,8,0,7,4,8,1,6,0,2,7,3,3,8,0,3,5,4,8,1,1,7,3,6,2,
 3,5,5,6,7,3,7,8,4,8,0,2,5,3,4,4,8,2,8,3,6,2,5,2,2,7,0,0,1,1,6,4,3,7,3,4,2,
 6,5,6,5,6,7,1,0,4,6,8,5,4,7,3,4,6,1,4,2,0,3,2,8,1,3,2,7,3,5,6,6,8,5,0,8,5,
 1,1,7,4,7,5,6,7,1,1,1,1,3,3,4,6,6,6,3,6,0,2,6,0,6,0,4,0,1,7,4,3,7,2,6,4,7,
 6,1,4,1,4,2,6,4,8,1,1,0,2,1,3,5,6,3,3,7,0,5,0,5,4,8,7,7,3,6,6,7,0,4,3,4,5,
 8,2,3,7,5,6,1,4,8,6,6,0,6,5,7,3,5,1,5,7,4,5,6,4,1,0,3,0,6,8,7,7,1,2,8,0,5,
 0,2,5,2,3,2,7,6,2,0,7,5,4,6,4,5,4,4,2,2,7,4,2,2,1,2,2,0,3,1,7,6,3,3,5,1,4,
 4,5,5,1,6,2,6,5,3,1,5,5,5,6,8,2,1,6,0,8,8,3,6,7,5,2,3,6,0,5,6,5,4,3,4,8,5,
 6};
    assert((a19 == b19));
    matf<32, 2> a20 = {4,7,0,5,5,8,0,7,4,4,7,2,5,5,3,2,4,1,4,1,8,1,5,3,4,3,8,0,1,2,5,8,6,6,8,3,4,
 3,0,7,0,6,1,0,6,1,5,5,5,6,2,7,1,1,1,7,0,8,6,1,7,6,5,1};
    matf<32, 2> b20 = {4,7,0,5,5,8,0,7,4,4,7,2,5,5,3,2,4,1,4,1,8,1,5,3,4,3,8,0,1,2,5,8,6,6,8,3,4,
 3,0,7,0,6,1,0,6,1,5,5,5,6,2,7,1,1,1,7,0,8,6,1,7,6,5,1};
    assert((a20 == b20));
    matf<32, 8> a21 = {4,5,2,1,1,6,3,5,5,7,1,4,3,2,4,3,4,1,3,6,7,7,2,6,4,2,0,1,1,5,0,8,2,3,8,7,2,
 5,7,5,1,8,3,5,7,8,4,0,3,5,1,6,6,5,1,5,8,0,7,6,7,8,0,7,3,6,3,3,4,1,4,7,4,6,
 7,7,6,6,0,7,6,8,4,5,4,0,6,6,7,4,5,6,2,6,8,0,2,0,8,7,4,2,0,2,8,0,2,5,2,3,5,
 1,1,0,6,3,1,0,5,7,2,0,7,5,4,2,6,0,6,1,8,8,0,2,0,3,3,3,3,0,4,1,2,3,5,1,4,4,
 6,6,2,3,7,2,8,5,3,8,2,6,4,5,6,4,7,7,5,2,7,3,7,1,4,7,3,7,2,0,7,1,3,2,5,3,2,
 8,0,6,0,3,0,6,6,4,7,0,1,6,0,0,8,6,5,3,3,8,6,5,4,1,5,0,7,0,4,8,7,0,4,8,0,8,
 2,3,1,8,2,2,8,8,5,0,1,2,6,8,1,8,8,4,6,5,4,8,6,8,4,5,0,8,4,1,5,8,2,5};
    matf<32, 8> b21 = {4,5,2,1,1,6,3,5,5,7,1,4,3,2,4,3,4,1,3,6,7,7,2,6,4,2,0,1,1,5,0,8,2,3,8,7,2,
 5,7,5,1,8,3,5,7,8,4,0,3,5,1,6,6,5,1,5,8,0,7,6,7,8,0,7,3,6,3,3,4,1,4,7,4,6,
 7,7,6,6,0,7,6,8,4,5,4,0,6,6,7,4,5,6,2,6,8,0,2,0,8,7,4,2,0,2,8,0,2,5,2,3,5,
 1,1,0,6,3,1,0,5,7,2,0,7,5,4,2,6,0,6,1,8,8,0,2,0,3,3,3,3,0,4,1,2,3,5,1,4,4,
 6,6,2,3,7,2,8,5,3,8,2,6,4,5,6,4,7,7,5,2,7,3,7,1,4,7,3,7,2,0,7,1,3,2,5,3,2,
 8,0,6,0,3,0,6,6,4,7,0,1,6,0,0,8,6,5,3,3,8,6,5,4,1,5,0,7,0,4,8,7,0,4,8,0,8,
 2,3,1,8,2,2,8,8,5,0,1,2,6,8,1,8,8,4,6,5,4,8,6,8,4,5,0,8,4,1,5,8,2,5};
    assert((a21 == b21));
    matf<32, 16> a22 = {8,3,8,0,3,1,3,4,8,2,7,8,1,6,1,5,5,1,6,4,2,7,6,6,6,3,8,0,7,8,8,0,5,7,6,3,8,
 6,8,0,7,8,7,2,2,4,0,2,7,7,8,7,6,6,2,4,1,2,1,2,1,3,5,1,4,3,1,6,4,7,2,8,6,0,
 2,0,4,1,6,1,4,1,7,6,6,2,1,1,2,6,5,3,0,3,2,5,2,7,8,4,3,1,3,8,4,4,6,1,6,8,8,
 6,7,2,2,4,4,1,8,4,4,2,5,6,4,5,0,0,1,0,4,3,0,1,3,0,8,1,3,0,4,8,1,8,1,8,6,1,
 7,6,7,4,1,4,8,4,4,8,5,2,7,5,8,2,1,8,5,3,3,8,0,7,1,4,2,2,8,5,8,1,1,8,1,0,4,
 7,8,4,6,3,2,7,7,4,2,2,2,6,4,2,3,1,7,6,2,5,2,6,5,7,0,4,5,7,2,5,4,7,0,8,1,7,
 4,5,3,1,7,0,6,4,6,5,5,4,3,3,0,5,1,4,8,6,5,6,2,1,7,4,0,1,5,1,2,7,8,1,1,8,8,
 8,8,5,4,0,5,5,0,6,8,3,2,8,2,0,8,4,6,8,6,4,4,5,3,5,7,6,3,4,5,6,8,7,1,8,6,1,
 3,7,3,2,6,7,4,1,6,2,4,8,1,7,5,2,5,0,7,7,0,7,4,3,3,8,1,8,5,1,3,0,6,2,6,7,3,
 2,2,7,1,0,6,0,2,6,5,7,0,6,6,2,7,6,8,5,2,8,2,5,3,2,0,4,7,8,6,7,8,8,8,0,5,3,
 2,6,3,1,1,3,8,5,3,4,8,6,7,1,6,7,2,6,3,3,5,4,4,3,1,7,7,8,4,6,1,5,0,1,8,7,0,
 0,3,6,6,4,7,8,2,6,6,3,1,1,4,7,3,1,3,5,8,0,1,7,2,6,5,2,2,2,5,5,4,2,0,3,7,4,
 2,7,7,3,5,3,0,8,4,2,4,2,7,8,7,3,0,8,4,5,8,1,5,0,7,2,7,3,1,2,6,8,7,6,5,8,5,
 2,7,7,1,7,0,3,5,1,7,8,0,5,6,3,3,4,1,0,5,2,8,4,5,7,8,4,8,1,0,1};
    matf<32, 16> b22 = {8,3,8,0,3,1,3,4,8,2,7,8,1,6,1,5,5,1,6,4,2,7,6,6,6,3,8,0,7,8,8,0,5,7,6,3,8,
 6,8,0,7,8,7,2,2,4,0,2,7,7,8,7,6,6,2,4,1,2,1,2,1,3,5,1,4,3,1,6,4,7,2,8,6,0,
 2,0,4,1,6,1,4,1,7,6,6,2,1,1,2,6,5,3,0,3,2,5,2,7,8,4,3,1,3,8,4,4,6,1,6,8,8,
 6,7,2,2,4,4,1,8,4,4,2,5,6,4,5,0,0,1,0,4,3,0,1,3,0,8,1,3,0,4,8,1,8,1,8,6,1,
 7,6,7,4,1,4,8,4,4,8,5,2,7,5,8,2,1,8,5,3,3,8,0,7,1,4,2,2,8,5,8,1,1,8,1,0,4,
 7,8,4,6,3,2,7,7,4,2,2,2,6,4,2,3,1,7,6,2,5,2,6,5,7,0,4,5,7,2,5,4,7,0,8,1,7,
 4,5,3,1,7,0,6,4,6,5,5,4,3,3,0,5,1,4,8,6,5,6,2,1,7,4,0,1,5,1,2,7,8,1,1,8,8,
 8,8,5,4,0,5,5,0,6,8,3,2,8,2,0,8,4,6,8,6,4,4,5,3,5,7,6,3,4,5,6,8,7,1,8,6,1,
 3,7,3,2,6,7,4,1,6,2,4,8,1,7,5,2,5,0,7,7,0,7,4,3,3,8,1,8,5,1,3,0,6,2,6,7,3,
 2,2,7,1,0,6,0,2,6,5,7,0,6,6,2,7,6,8,5,2,8,2,5,3,2,0,4,7,8,6,7,8,8,8,0,5,3,
 2,6,3,1,1,3,8,5,3,4,8,6,7,1,6,7,2,6,3,3,5,4,4,3,1,7,7,8,4,6,1,5,0,1,8,7,0,
 0,3,6,6,4,7,8,2,6,6,3,1,1,4,7,3,1,3,5,8,0,1,7,2,6,5,2,2,2,5,5,4,2,0,3,7,4,
 2,7,7,3,5,3,0,8,4,2,4,2,7,8,7,3,0,8,4,5,8,1,5,0,7,2,7,3,1,2,6,8,7,6,5,8,5,
 2,7,7,1,7,0,3,5,1,7,8,0,5,6,3,3,4,1,0,5,2,8,4,5,7,8,4,8,1,0,1};
    assert((a22 == b22));
    matf<32, 22> a23 = {0,5,8,8,5,2,0,4,2,6,5,5,6,8,2,1,3,2,1,0,1,4,7,3,2,7,6,6,3,5,6,7,2,7,1,0,2,
 0,4,1,6,0,3,2,4,2,0,0,0,1,7,6,0,8,2,7,2,2,2,8,2,6,2,0,0,5,6,4,3,6,4,7,6,0,
 3,7,6,3,3,3,5,3,0,1,6,0,0,2,4,1,4,8,4,2,5,4,3,1,0,8,6,1,5,0,1,0,7,1,2,0,2,
 3,2,4,2,0,7,6,6,0,1,7,5,3,5,8,8,7,8,5,2,1,2,3,3,6,4,4,4,4,8,2,8,0,1,3,3,8,
 7,1,3,0,2,1,6,6,1,5,3,5,2,4,6,8,1,5,3,0,4,7,8,8,4,6,7,8,6,5,2,5,7,0,7,0,4,
 2,7,4,4,3,0,3,5,0,5,3,2,0,5,7,6,2,2,0,0,1,6,2,8,8,3,5,8,0,7,2,7,4,6,0,8,3,
 2,5,5,5,3,0,8,6,2,3,0,2,5,2,5,6,5,1,2,8,4,2,8,5,3,3,8,2,1,1,4,8,8,5,0,6,2,
 6,1,1,1,3,2,5,7,6,3,3,1,7,0,0,6,5,2,4,7,8,8,6,2,3,7,4,2,5,5,4,3,5,2,1,2,0,
 0,6,2,4,7,1,8,8,6,0,5,8,0,1,7,3,8,0,5,6,3,2,4,7,6,5,7,8,3,7,8,1,7,7,5,3,3,
 0,0,0,0,4,3,8,8,3,1,3,4,8,7,4,0,4,7,8,7,1,2,4,2,2,6,1,4,5,2,7,1,4,2,5,4,2,
 2,0,6,8,7,8,7,1,7,3,8,5,4,0,6,3,2,3,2,0,6,6,0,1,7,0,2,7,1,1,4,3,6,5,7,5,6,
 3,7,7,3,1,8,2,0,4,2,1,5,3,6,0,1,2,3,7,0,6,6,4,1,2,1,3,2,3,7,8,1,1,3,5,2,4,
 4,7,7,3,6,0,0,6,6,7,3,3,2,0,8,3,8,3,8,8,5,2,4,7,5,1,2,6,0,3,2,7,8,1,1,4,2,
 1,7,2,8,0,5,2,5,6,5,8,8,4,5,2,8,5,6,2,3,8,3,0,6,5,2,0,7,5,6,7,5,4,1,4,4,6,
 6,5,1,0,4,3,6,4,3,8,5,5,3,3,5,3,5,0,8,7,1,8,4,7,8,1,8,3,2,1,7,3,8,3,3,8,1,
 6,1,1,4,8,2,1,1,1,8,5,1,2,1,6,5,1,1,3,5,3,5,3,1,6,2,4,2,3,0,2,2,3,6,2,7,2,
 1,3,0,4,3,0,3,5,1,5,1,0,0,5,2,2,4,8,6,3,8,1,3,8,5,2,8,4,0,8,5,5,2,1,4,5,1,
 8,7,6,6,0,4,1,8,1,0,2,2,6,7,5,7,1,6,8,2,5,5,4,6,2,2,7,3,5,0,6,3,6,7,5,5,3,
 5,6,4,5,4,4,2,2,0,3,6,3,7,0,6,1,3,0,4,6,4,7,0,2,3,2,0,3,1,6,7,2,6,6,3,8,3,
 6};
    matf<32, 22> b23 = {0,5,8,8,5,2,0,4,2,6,5,5,6,8,2,1,3,2,1,0,1,4,7,3,2,7,6,6,3,5,6,7,2,7,1,0,2,
 0,4,1,6,0,3,2,4,2,0,0,0,1,7,6,0,8,2,7,2,2,2,8,2,6,2,0,0,5,6,4,3,6,4,7,6,0,
 3,7,6,3,3,3,5,3,0,1,6,0,0,2,4,1,4,8,4,2,5,4,3,1,0,8,6,1,5,0,1,0,7,1,2,0,2,
 3,2,4,2,0,7,6,6,0,1,7,5,3,5,8,8,7,8,5,2,1,2,3,3,6,4,4,4,4,8,2,8,0,1,3,3,8,
 7,1,3,0,2,1,6,6,1,5,3,5,2,4,6,8,1,5,3,0,4,7,8,8,4,6,7,8,6,5,2,5,7,0,7,0,4,
 2,7,4,4,3,0,3,5,0,5,3,2,0,5,7,6,2,2,0,0,1,6,2,8,8,3,5,8,0,7,2,7,4,6,0,8,3,
 2,5,5,5,3,0,8,6,2,3,0,2,5,2,5,6,5,1,2,8,4,2,8,5,3,3,8,2,1,1,4,8,8,5,0,6,2,
 6,1,1,1,3,2,5,7,6,3,3,1,7,0,0,6,5,2,4,7,8,8,6,2,3,7,4,2,5,5,4,3,5,2,1,2,0,
 0,6,2,4,7,1,8,8,6,0,5,8,0,1,7,3,8,0,5,6,3,2,4,7,6,5,7,8,3,7,8,1,7,7,5,3,3,
 0,0,0,0,4,3,8,8,3,1,3,4,8,7,4,0,4,7,8,7,1,2,4,2,2,6,1,4,5,2,7,1,4,2,5,4,2,
 2,0,6,8,7,8,7,1,7,3,8,5,4,0,6,3,2,3,2,0,6,6,0,1,7,0,2,7,1,1,4,3,6,5,7,5,6,
 3,7,7,3,1,8,2,0,4,2,1,5,3,6,0,1,2,3,7,0,6,6,4,1,2,1,3,2,3,7,8,1,1,3,5,2,4,
 4,7,7,3,6,0,0,6,6,7,3,3,2,0,8,3,8,3,8,8,5,2,4,7,5,1,2,6,0,3,2,7,8,1,1,4,2,
 1,7,2,8,0,5,2,5,6,5,8,8,4,5,2,8,5,6,2,3,8,3,0,6,5,2,0,7,5,6,7,5,4,1,4,4,6,
 6,5,1,0,4,3,6,4,3,8,5,5,3,3,5,3,5,0,8,7,1,8,4,7,8,1,8,3,2,1,7,3,8,3,3,8,1,
 6,1,1,4,8,2,1,1,1,8,5,1,2,1,6,5,1,1,3,5,3,5,3,1,6,2,4,2,3,0,2,2,3,6,2,7,2,
 1,3,0,4,3,0,3,5,1,5,1,0,0,5,2,2,4,8,6,3,8,1,3,8,5,2,8,4,0,8,5,5,2,1,4,5,1,
 8,7,6,6,0,4,1,8,1,0,2,2,6,7,5,7,1,6,8,2,5,5,4,6,2,2,7,3,5,0,6,3,6,7,5,5,3,
 5,6,4,5,4,4,2,2,0,3,6,3,7,0,6,1,3,0,4,6,4,7,0,2,3,2,0,3,1,6,7,2,6,6,3,8,3,
 6};
    assert((a23 == b23));
    matf<32, 32> a24 = {5,7,1,0,7,3,4,3,5,7,7,6,8,7,0,3,7,4,8,3,5,4,8,7,5,2,3,5,0,6,3,2,6,7,7,0,6,
 4,4,8,4,2,3,7,0,4,0,5,4,7,4,8,7,8,7,4,1,2,3,7,8,4,5,2,2,0,7,0,2,4,2,8,8,7,
 7,5,6,0,0,0,8,8,1,4,0,4,6,5,4,0,1,1,1,1,3,3,8,0,0,7,2,4,3,5,3,0,6,8,2,2,8,
 3,4,6,2,1,1,3,3,4,1,2,1,2,2,5,8,4,5,0,1,1,0,0,7,0,0,4,2,3,3,0,0,1,5,4,0,2,
 2,1,7,3,3,2,5,0,0,7,2,8,8,4,7,1,4,3,7,0,0,3,6,5,5,8,2,6,1,8,7,8,5,5,7,5,7,
 2,2,5,8,0,5,3,6,1,0,5,1,1,6,7,0,4,6,5,5,8,6,3,5,4,1,8,4,1,3,1,1,4,7,7,5,1,
 0,7,2,8,4,2,8,1,1,2,1,2,1,5,6,6,5,8,3,0,0,8,5,8,8,3,4,4,0,6,5,8,7,4,8,4,5,
 5,8,1,7,0,0,0,1,7,4,1,0,3,6,5,8,8,7,5,2,8,0,3,5,6,8,2,0,6,2,8,3,5,7,1,1,7,
 0,7,7,0,8,4,4,1,2,3,4,8,5,3,0,0,2,3,7,7,6,6,7,7,6,4,7,1,6,5,1,3,7,3,7,3,5,
 3,3,4,5,1,0,7,7,4,8,2,5,3,3,1,1,0,1,6,8,8,0,8,5,6,2,7,7,6,5,2,4,3,3,8,0,4,
 2,1,3,4,2,5,1,2,8,6,3,1,0,7,3,3,4,7,7,8,6,5,0,5,0,4,0,0,7,3,6,4,6,2,0,6,2,
 3,3,1,0,0,6,4,5,6,3,2,6,8,3,8,8,5,8,2,3,2,6,5,0,2,4,6,0,7,3,6,8,1,6,8,7,1,
 2,5,7,4,7,5,8,3,6,4,1,7,5,2,2,5,8,6,4,7,3,6,3,8,7,8,5,2,6,5,6,7,0,7,2,8,1,
 2,8,6,7,8,4,6,5,6,2,7,7,3,5,8,7,6,7,7,3,8,6,3,3,6,5,5,1,4,6,6,1,8,2,8,4,1,
 4,3,6,8,1,6,1,7,4,4,4,7,7,5,2,1,3,6,6,8,1,8,2,0,7,5,7,7,2,2,5,0,7,5,6,0,5,
 1,6,2,3,8,6,3,2,2,0,7,6,6,1,3,5,8,7,1,6,6,2,2,1,0,8,4,7,8,3,6,3,8,8,8,5,6,
 2,4,2,7,5,6,8,0,4,5,4,4,3,2,8,3,8,6,4,2,2,2,6,6,1,2,3,3,1,0,5,2,4,1,5,2,6,
 4,3,2,1,3,5,0,8,8,5,3,7,3,5,8,4,3,1,8,7,2,2,1,0,1,8,6,8,8,1,6,1,6,6,0,2,6,
 2,3,4,2,5,4,3,7,3,7,5,8,2,8,5,2,8,6,0,2,3,1,2,5,6,2,8,0,7,7,6,8,1,6,6,4,7,
 1,2,1,8,3,6,7,7,7,6,3,8,2,1,7,7,8,6,7,0,0,5,7,8,2,6,5,4,2,3,0,7,1,0,8,2,5,
 7,8,6,8,4,0,4,4,7,5,1,1,4,3,7,8,4,4,4,3,6,5,7,2,4,4,6,4,3,1,8,8,1,6,5,1,2,
 4,2,5,8,7,6,8,0,3,8,0,2,2,4,7,7,8,5,6,1,7,7,5,1,8,6,4,0,2,7,1,4,5,1,1,2,4,
 6,0,3,6,5,2,1,8,5,6,8,8,6,2,6,5,5,2,3,0,1,7,7,2,1,4,4,0,7,1,8,1,7,8,3,1,8,
 4,8,5,7,8,4,5,6,2,8,8,8,8,3,8,7,3,8,6,8,7,7,1,8,6,1,2,7,4,7,6,5,6,1,4,7,1,
 1,6,5,8,6,5,3,1,8,0,8,1,7,7,6,7,2,2,5,0,8,8,0,5,1,8,0,8,6,7,6,4,1,1,2,1,0,
 0,8,7,0,6,4,5,0,0,2,5,6,4,6,0,5,4,4,6,5,2,3,1,5,4,0,5,8,2,3,1,3,2,5,7,6,4,
 4,2,2,0,2,2,0,5,3,0,4,3,5,2,0,8,1,0,8,1,1,0,3,3,5,5,3,7,0,1,8,0,7,0,5,8,7,
 8,5,3,1,7,6,5,5,1,8,6,2,2,4,1,5,8,0,7,2,3,1,4,8,7};
    matf<32, 32> b24 = {5,7,1,0,7,3,4,3,5,7,7,6,8,7,0,3,7,4,8,3,5,4,8,7,5,2,3,5,0,6,3,2,6,7,7,0,6,
 4,4,8,4,2,3,7,0,4,0,5,4,7,4,8,7,8,7,4,1,2,3,7,8,4,5,2,2,0,7,0,2,4,2,8,8,7,
 7,5,6,0,0,0,8,8,1,4,0,4,6,5,4,0,1,1,1,1,3,3,8,0,0,7,2,4,3,5,3,0,6,8,2,2,8,
 3,4,6,2,1,1,3,3,4,1,2,1,2,2,5,8,4,5,0,1,1,0,0,7,0,0,4,2,3,3,0,0,1,5,4,0,2,
 2,1,7,3,3,2,5,0,0,7,2,8,8,4,7,1,4,3,7,0,0,3,6,5,5,8,2,6,1,8,7,8,5,5,7,5,7,
 2,2,5,8,0,5,3,6,1,0,5,1,1,6,7,0,4,6,5,5,8,6,3,5,4,1,8,4,1,3,1,1,4,7,7,5,1,
 0,7,2,8,4,2,8,1,1,2,1,2,1,5,6,6,5,8,3,0,0,8,5,8,8,3,4,4,0,6,5,8,7,4,8,4,5,
 5,8,1,7,0,0,0,1,7,4,1,0,3,6,5,8,8,7,5,2,8,0,3,5,6,8,2,0,6,2,8,3,5,7,1,1,7,
 0,7,7,0,8,4,4,1,2,3,4,8,5,3,0,0,2,3,7,7,6,6,7,7,6,4,7,1,6,5,1,3,7,3,7,3,5,
 3,3,4,5,1,0,7,7,4,8,2,5,3,3,1,1,0,1,6,8,8,0,8,5,6,2,7,7,6,5,2,4,3,3,8,0,4,
 2,1,3,4,2,5,1,2,8,6,3,1,0,7,3,3,4,7,7,8,6,5,0,5,0,4,0,0,7,3,6,4,6,2,0,6,2,
 3,3,1,0,0,6,4,5,6,3,2,6,8,3,8,8,5,8,2,3,2,6,5,0,2,4,6,0,7,3,6,8,1,6,8,7,1,
 2,5,7,4,7,5,8,3,6,4,1,7,5,2,2,5,8,6,4,7,3,6,3,8,7,8,5,2,6,5,6,7,0,7,2,8,1,
 2,8,6,7,8,4,6,5,6,2,7,7,3,5,8,7,6,7,7,3,8,6,3,3,6,5,5,1,4,6,6,1,8,2,8,4,1,
 4,3,6,8,1,6,1,7,4,4,4,7,7,5,2,1,3,6,6,8,1,8,2,0,7,5,7,7,2,2,5,0,7,5,6,0,5,
 1,6,2,3,8,6,3,2,2,0,7,6,6,1,3,5,8,7,1,6,6,2,2,1,0,8,4,7,8,3,6,3,8,8,8,5,6,
 2,4,2,7,5,6,8,0,4,5,4,4,3,2,8,3,8,6,4,2,2,2,6,6,1,2,3,3,1,0,5,2,4,1,5,2,6,
 4,3,2,1,3,5,0,8,8,5,3,7,3,5,8,4,3,1,8,7,2,2,1,0,1,8,6,8,8,1,6,1,6,6,0,2,6,
 2,3,4,2,5,4,3,7,3,7,5,8,2,8,5,2,8,6,0,2,3,1,2,5,6,2,8,0,7,7,6,8,1,6,6,4,7,
 1,2,1,8,3,6,7,7,7,6,3,8,2,1,7,7,8,6,7,0,0,5,7,8,2,6,5,4,2,3,0,7,1,0,8,2,5,
 7,8,6,8,4,0,4,4,7,5,1,1,4,3,7,8,4,4,4,3,6,5,7,2,4,4,6,4,3,1,8,8,1,6,5,1,2,
 4,2,5,8,7,6,8,0,3,8,0,2,2,4,7,7,8,5,6,1,7,7,5,1,8,6,4,0,2,7,1,4,5,1,1,2,4,
 6,0,3,6,5,2,1,8,5,6,8,8,6,2,6,5,5,2,3,0,1,7,7,2,1,4,4,0,7,1,8,1,7,8,3,1,8,
 4,8,5,7,8,4,5,6,2,8,8,8,8,3,8,7,3,8,6,8,7,7,1,8,6,1,2,7,4,7,6,5,6,1,4,7,1,
 1,6,5,8,6,5,3,1,8,0,8,1,7,7,6,7,2,2,5,0,8,8,0,5,1,8,0,8,6,7,6,4,1,1,2,1,0,
 0,8,7,0,6,4,5,0,0,2,5,6,4,6,0,5,4,4,6,5,2,3,1,5,4,0,5,8,2,3,1,3,2,5,7,6,4,
 4,2,2,0,2,2,0,5,3,0,4,3,5,2,0,8,1,0,8,1,1,0,3,3,5,5,3,7,0,1,8,0,7,0,5,8,7,
 8,5,3,1,7,6,5,5,1,8,6,2,2,4,1,5,8,0,7,2,3,1,4,8,7};
    assert((a24 == b24));
}

int main() {
    EXECUTE_TEST(test_vector_comparisons);
    EXECUTE_TEST(test_vector_deep_copies);
    EXECUTE_TEST(test_vector_addition);
    EXECUTE_TEST(test_vector_substraction);
    EXECUTE_TEST(test_vector_length);
    EXECUTE_TEST(test_vector_dotproduct);
    EXECUTE_TEST(test_vector_multiplication);
    EXECUTE_TEST(test_matrix_indexing);
    EXECUTE_TEST(test_matrix_deep_copies);
    EXECUTE_TEST(test_matrix_comparisons);
}
