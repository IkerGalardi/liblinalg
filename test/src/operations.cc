#include <cassert>
#include <iostream>

#include "liblinalg.hh"

#define EXECUTE_TEST(test_func) \
    std::cout << "Executing " #test_func "... " << std::flush; \
    test_func(); \
    std::cout << "OK" << std::endl

void test_vector_comparisons() {
    vecf<2> a0= {1,8};
    vecf<2> b0= {1,8};
    assert((a0 == b0));
    vecf<8> a1= {7,6,6,6,0,3,8,5};
    vecf<8> b1= {7,6,6,6,0,3,8,5};
    assert((a1 == b1));
    vecf<16> a2= {5,0,6,1,3,8,7,5,0,6,5,6,4,6,0,3};
    vecf<16> b2= {5,0,6,1,3,8,7,5,0,6,5,6,4,6,0,3};
    assert((a2 == b2));
    vecf<22> a3= {8,6,6,1,8,6,6,4,7,6,1,1,1,4,1,5,3,7,7,4,7,0};
    vecf<22> b3= {8,6,6,1,8,6,6,4,7,6,1,1,1,4,1,5,3,7,7,4,7,0};
    assert((a3 == b3));
    vecf<32> a4= {6,4,4,4,0,1,7,4,4,1,3,0,6,6,7,3,0,5,4,0,3,4,1,6,6,7,0,7,5,5,4,4};
    vecf<32> b4= {6,4,4,4,0,1,7,4,4,1,3,0,6,6,7,3,0,5,4,0,3,4,1,6,6,7,0,7,5,5,4,4};
    assert((a4 == b4));
}
// TODO: vector deep copies test
void test_vector_addition() {
    vecf<2> a0= {1,0};
    vecf<2> b0= {6,8};
    vecf<2> e0= {7,8};
    auto r0 = a0 + b0;
    assert((r0 == e0));
    vecf<8> a1= {3,6,5,3,0,4,2,7};
    vecf<8> b1= {7,0,0,2,0,2,3,8};
    vecf<8> e1= {10, 6, 5, 5, 0, 6, 5,15};
    auto r1 = a1 + b1;
    assert((r1 == e1));
    vecf<16> a2= {4,5,2,7,4,4,8,1,8,0,8,4,4,4,1,7};
    vecf<16> b2= {0,4,1,4,6,8,6,5,1,4,5,8,7,1,3,3};
    vecf<16> e2= { 4, 9, 3,11,10,12,14, 6, 9, 4,13,12,11, 5, 4,10};
    auto r2 = a2 + b2;
    assert((r2 == e2));
    vecf<22> a3= {3,1,3,0,2,2,0,7,1,7,5,7,1,2,3,0,0,5,4,4,4,2};
    vecf<22> b3= {1,4,5,7,1,5,7,3,7,6,5,8,2,8,4,1,1,7,4,5,0,4};
    vecf<22> e3= { 4, 5, 8, 7, 3, 7, 7,10, 8,13,10,15, 3,10, 7, 1, 1,12, 8, 9, 4, 6};
    auto r3 = a3 + b3;
    assert((r3 == e3));
    vecf<32> a4= {6,4,3,1,4,3,6,5,5,7,8,7,7,6,2,8,8,0,3,5,7,4,7,6,2,1,6,1,8,5,0,7};
    vecf<32> b4= {0,1,3,3,4,5,2,4,4,6,5,2,6,2,6,7,0,7,3,6,1,8,8,7,6,8,8,4,4,8,1,8};
    vecf<32> e4= { 6, 5, 6, 4, 8, 8, 8, 9, 9,13,13, 9,13, 8, 8,15, 8, 7, 6,11, 8,12,15,13,
  8, 9,14, 5,12,13, 1,15};
    auto r4 = a4 + b4;
    assert((r4 == e4));
}
void test_vector_substraction() {
    vecf<2> a0= {0,7};
    vecf<2> b0= {0,6};
    vecf<2> e0= {0,1};
    auto r0 = a0 - b0;
    assert((r0 == e0));
    vecf<8> a1= {8,1,5,1,3,1,2,0};
    vecf<8> b1= {4,1,4,6,1,0,5,8};
    vecf<8> e1= { 4, 0, 1,-5, 2, 1,-3,-8};
    auto r1 = a1 - b1;
    assert((r1 == e1));
    vecf<16> a2= {3,8,7,5,2,0,2,7,0,8,4,6,8,5,7,7};
    vecf<16> b2= {7,0,6,0,1,5,3,6,6,2,8,8,0,7,2,1};
    vecf<16> e2= {-4, 8, 1, 5, 1,-5,-1, 1,-6, 6,-4,-2, 8,-2, 5, 6};
    auto r2 = a2 - b2;
    assert((r2 == e2));
    vecf<22> a3= {5,1,6,2,2,7,0,5,3,4,1,7,6,5,5,6,6,1,4,0,5,7};
    vecf<22> b3= {2,2,5,4,7,4,4,4,5,1,3,5,3,0,4,6,6,5,1,7,1,7};
    vecf<22> e3= { 3,-1, 1,-2,-5, 3,-4, 1,-2, 3,-2, 2, 3, 5, 1, 0, 0,-4, 3,-7, 4, 0};
    auto r3 = a3 - b3;
    assert((r3 == e3));
    vecf<32> a4= {0,4,5,1,4,4,0,5,6,8,2,6,0,0,8,0,5,4,5,6,4,5,0,5,5,1,1,5,0,6,2,5};
    vecf<32> b4= {2,1,2,1,4,4,4,4,5,4,3,8,4,2,1,5,7,5,1,6,1,1,6,1,1,0,0,4,2,7,6,4};
    vecf<32> e4= {-2, 3, 3, 0, 0, 0,-4, 1, 1, 4,-1,-2,-4,-2, 7,-5,-2,-1, 4, 0, 3, 4,-6, 4,
  4, 1, 1, 1,-2,-1,-4, 1};
    auto r4 = a4 - b4;
    assert((r4 == e4));
}
void test_vector_length() {
    vecf<2> a0= {2,5};
    float e0 = 29;
    auto r0 = length_squared(a0);
    assert((r0 == e0));
    vecf<8> a1= {0,3,6,6,8,6,6,5};
    float e1 = 242;
    auto r1 = length_squared(a1);
    assert((r1 == e1));
    vecf<16> a2= {3,0,3,8,0,6,2,4,5,0,1,2,5,7,0,6};
    float e2 = 278;
    auto r2 = length_squared(a2);
    assert((r2 == e2));
    vecf<22> a3= {3,1,4,2,5,8,5,5,6,2,8,5,0,4,2,7,3,2,1,7,2,6};
    float e3 = 470;
    auto r3 = length_squared(a3);
    assert((r3 == e3));
    vecf<32> a4= {2,8,2,4,4,6,1,2,7,2,6,5,0,3,5,5,3,1,7,3,2,3,8,3,5,4,1,1,1,0,2,7};
    float e4 = 569;
    auto r4 = length_squared(a4);
    assert((r4 == e4));
}
void test_vector_dotproduct() {
    vecf<2> a0= {3,2};
    vecf<2> b0= {3,0};
    float e0 = 9;
    auto r0 = dot(a0, b0);
    assert((r0 == e0));
    vecf<8> a1= {6,8,0,8,7,4,4,1};
    vecf<8> b1= {4,8,6,4,7,7,8,0};
    float e1 = 229;
    auto r1 = dot(a1, b1);
    assert((r1 == e1));
    vecf<16> a2= {7,5,6,4,0,1,8,7,5,5,4,7,1,5,5,5};
    vecf<16> b2= {3,7,3,4,5,4,5,6,6,7,6,3,7,0,6,1};
    float e2 = 328;
    auto r2 = dot(a2, b2);
    assert((r2 == e2));
    vecf<22> a3= {0,3,8,2,0,6,2,1,5,6,1,2,7,1,6,1,4,3,0,3,6,5};
    vecf<22> b3= {4,3,4,6,4,8,6,5,5,7,0,4,1,7,2,7,5,5,4,6,8,3};
    float e3 = 342;
    auto r3 = dot(a3, b3);
    assert((r3 == e3));
    vecf<32> a4= {0,8,6,4,7,2,5,3,6,4,3,6,2,3,3,7,2,7,0,7,8,8,7,4,3,8,1,6,5,6,1,0};
    vecf<32> b4= {3,5,6,4,4,8,8,2,6,3,3,1,0,5,2,0,5,5,0,8,3,1,3,0,4,3,3,7,7,0,2,8};
    float e4 = 538;
    auto r4 = dot(a4, b4);
    assert((r4 == e4));
}
void test_vector_multiplication() {
    vecf<2> a0= {8,2};
    vecf<2> b0= {8,6};
    vecf<2> e0= {64,12};
    auto r0 = a0 * b0;
    assert((r0 == e0));
    vecf<8> a1= {1,2,8,1,1,5,6,1};
    vecf<8> b1= {2,0,6,2,7,0,1,3};
    vecf<8> e1= { 2, 0,48, 2, 7, 0, 6, 3};
    auto r1 = a1 * b1;
    assert((r1 == e1));
    vecf<16> a2= {1,7,1,8,7,6,4,4,1,2,8,8,7,8,5,6};
    vecf<16> b2= {6,7,2,0,1,4,8,7,6,7,8,2,7,4,3,7};
    vecf<16> e2= { 6,49, 2, 0, 7,24,32,28, 6,14,64,16,49,32,15,42};
    auto r2 = a2 * b2;
    assert((r2 == e2));
    vecf<22> a3= {5,5,5,2,5,1,8,4,2,0,1,6,8,3,7,2,3,7,0,3,6,6};
    vecf<22> b3= {7,4,4,8,5,2,5,8,8,0,0,4,5,4,3,2,0,3,2,8,5,3};
    vecf<22> e3= {35,20,20,16,25, 2,40,32,16, 0, 0,24,40,12,21, 4, 0,21, 0,24,30,18};
    auto r3 = a3 * b3;
    assert((r3 == e3));
    vecf<32> a4= {0,2,4,2,4,2,8,5,7,7,6,5,5,6,1,4,2,8,2,3,1,4,3,6,8,1,1,8,4,2,8,1};
    vecf<32> b4= {7,5,8,3,3,1,0,4,3,2,0,3,2,0,4,1,7,7,2,2,8,8,8,3,2,3,4,7,0,5,1,3};
    vecf<32> e4= { 0,10,32, 6,12, 2, 0,20,21,14, 0,15,10, 0, 4, 4,14,56, 4, 6, 8,32,24,18,
 16, 3, 4,56, 0,10, 8, 3};
    auto r4 = a4 * b4;
    assert((r4 == e4));
}

int main() {
    EXECUTE_TEST(test_vector_comparisons);
    EXECUTE_TEST(test_vector_addition);
    EXECUTE_TEST(test_vector_substraction);
    EXECUTE_TEST(test_vector_length);
    EXECUTE_TEST(test_vector_dotproduct);
    EXECUTE_TEST(test_vector_multiplication);
}
