#include <cassert>
#include <iostream>

#include "liblinalg.hh"

#define EXECUTE_TEST(test_func) \
    std::cout << "Executing " #test_func "... " << std::flush; \
    test_func(); \
    std::cout << "OK" << std::endl

void test_vector_comparisons() {
    vecf<2> a0= {3,0};
    vecf<2> b0= {3,0};
    assert((a0 == b0));
    vecf<8> a1= {6,6,4,3,1,8,4,8};
    vecf<8> b1= {6,6,4,3,1,8,4,8};
    assert((a1 == b1));
    vecf<16> a2= {5,6,0,3,3,8,0,1,1,1,7,0,0,3,6,4};
    vecf<16> b2= {5,6,0,3,3,8,0,1,1,1,7,0,0,3,6,4};
    assert((a2 == b2));
    vecf<22> a3= {8,5,1,7,2,6,4,5,1,0,6,1,4,5,1,5,3,4,7,5,2,2};
    vecf<22> b3= {8,5,1,7,2,6,4,5,1,0,6,1,4,5,1,5,3,4,7,5,2,2};
    assert((a3 == b3));
    vecf<32> a4= {1,1,8,0,3,6,5,5,6,7,1,2,7,6,5,0,3,5,7,5,7,4,2,3,4,7,0,7,2,1,8,7};
    vecf<32> b4= {1,1,8,0,3,6,5,5,6,7,1,2,7,6,5,0,3,5,7,5,7,4,2,3,4,7,0,7,2,1,8,7};
    assert((a4 == b4));
}
void test_vector_deep_copies() {
    vecf<2> a = {1, 2};
    auto b = a;
    b.data[0] = 7;
    assert((a.data[0]) == 1);
}
void test_vector_addition() {
    vecf<2> a0= {2,0};
    vecf<2> b0= {4,0};
    vecf<2> e0= {6,0};
    auto r0 = a0 + b0;
    assert((r0 == e0));
    vecf<8> a1= {0,3,2,3,7,1,6,6};
    vecf<8> b1= {0,2,4,5,8,0,6,2};
    vecf<8> e1= { 0, 5, 6, 8,15, 1,12, 8};
    auto r1 = a1 + b1;
    assert((r1 == e1));
    vecf<16> a2= {5,4,4,0,6,8,6,3,1,1,8,6,1,7,2,3};
    vecf<16> b2= {8,5,4,0,5,8,4,6,7,2,3,6,4,7,1,2};
    vecf<16> e2= {13, 9, 8, 0,11,16,10, 9, 8, 3,11,12, 5,14, 3, 5};
    auto r2 = a2 + b2;
    assert((r2 == e2));
    vecf<22> a3= {3,6,3,8,2,6,4,6,4,5,6,7,6,6,5,1,0,2,0,8,1,4};
    vecf<22> b3= {1,6,5,3,4,2,0,3,0,5,1,4,2,2,7,8,0,0,7,4,6,5};
    vecf<22> e3= { 4,12, 8,11, 6, 8, 4, 9, 4,10, 7,11, 8, 8,12, 9, 0, 2, 7,12, 7, 9};
    auto r3 = a3 + b3;
    assert((r3 == e3));
    vecf<32> a4= {2,5,6,7,3,0,4,3,8,3,3,1,6,1,8,3,4,1,3,8,4,8,0,5,7,4,8,1,0,7,2,2};
    vecf<32> b4= {3,1,0,6,6,1,1,0,6,2,5,4,1,0,0,2,2,3,4,8,2,8,5,4,0,6,1,8,4,4,8,8};
    vecf<32> e4= { 5, 6, 6,13, 9, 1, 5, 3,14, 5, 8, 5, 7, 1, 8, 5, 6, 4, 7,16, 6,16, 5, 9,
  7,10, 9, 9, 4,11,10,10};
    auto r4 = a4 + b4;
    assert((r4 == e4));
}
void test_vector_substraction() {
    vecf<2> a0= {0,6};
    vecf<2> b0= {1,4};
    vecf<2> e0= {-1, 2};
    auto r0 = a0 - b0;
    assert((r0 == e0));
    vecf<8> a1= {7,6,1,0,7,4,3,1};
    vecf<8> b1= {8,4,2,2,4,6,0,2};
    vecf<8> e1= {-1, 2,-1,-2, 3,-2, 3,-1};
    auto r1 = a1 - b1;
    assert((r1 == e1));
    vecf<16> a2= {8,1,0,2,2,5,2,1,5,7,3,0,0,2,8,8};
    vecf<16> b2= {5,1,4,0,1,4,7,1,5,2,0,6,6,7,4,2};
    vecf<16> e2= { 3, 0,-4, 2, 1, 1,-5, 0, 0, 5, 3,-6,-6,-5, 4, 6};
    auto r2 = a2 - b2;
    assert((r2 == e2));
    vecf<22> a3= {0,1,0,6,3,0,6,6,2,4,3,4,0,3,8,0,3,8,0,3,7,8};
    vecf<22> b3= {0,2,6,3,3,7,6,0,3,5,7,4,2,4,1,6,1,4,6,3,6,7};
    vecf<22> e3= { 0,-1,-6, 3, 0,-7, 0, 6,-1,-1,-4, 0,-2,-1, 7,-6, 2, 4,-6, 0, 1, 1};
    auto r3 = a3 - b3;
    assert((r3 == e3));
    vecf<32> a4= {2,0,3,3,3,0,4,3,4,5,8,7,4,1,2,8,1,7,4,8,0,3,4,3,3,6,8,2,2,0,5,8};
    vecf<32> b4= {6,8,6,8,7,7,5,3,5,2,4,0,7,7,2,0,1,5,8,7,3,2,0,7,0,0,6,1,2,6,3,6};
    vecf<32> e4= {-4,-8,-3,-5,-4,-7,-1, 0,-1, 3, 4, 7,-3,-6, 0, 8, 0, 2,-4, 1,-3, 1, 4,-4,
  3, 6, 2, 1, 0,-6, 2, 2};
    auto r4 = a4 - b4;
    assert((r4 == e4));
}
void test_vector_length() {
    vecf<2> a0= {6,4};
    float e0 = 52;
    auto r0 = length_squared(a0);
    assert((r0 == e0));
    vecf<8> a1= {3,4,6,4,8,0,7,4};
    float e1 = 206;
    auto r1 = length_squared(a1);
    assert((r1 == e1));
    vecf<16> a2= {0,1,5,8,6,2,4,1,0,5,1,7,4,5,6,7};
    float e2 = 348;
    auto r2 = length_squared(a2);
    assert((r2 == e2));
    vecf<22> a3= {0,6,2,4,1,1,3,2,4,5,7,2,0,6,2,6,7,3,7,0,6,5};
    float e3 = 409;
    auto r3 = length_squared(a3);
    assert((r3 == e3));
    vecf<32> a4= {8,3,6,1,3,0,3,1,2,7,7,0,1,7,4,6,3,5,4,6,4,5,5,5,7,1,7,6,7,5,6,8};
    float e4 = 819;
    auto r4 = length_squared(a4);
    assert((r4 == e4));
}
void test_vector_dotproduct() {
    vecf<2> a0= {5,8};
    vecf<2> b0= {8,8};
    float e0 = 104;
    auto r0 = dot(a0, b0);
    assert((r0 == e0));
    vecf<8> a1= {6,2,3,5,6,2,3,3};
    vecf<8> b1= {4,0,8,3,2,4,4,3};
    float e1 = 104;
    auto r1 = dot(a1, b1);
    assert((r1 == e1));
    vecf<16> a2= {6,1,3,4,4,4,8,7,7,6,4,5,8,5,6,2};
    vecf<16> b2= {7,3,7,8,4,8,6,5,7,3,8,4,0,6,2,5};
    float e2 = 400;
    auto r2 = dot(a2, b2);
    assert((r2 == e2));
    vecf<22> a3= {3,3,0,4,2,5,6,0,6,4,5,5,5,6,0,8,1,7,3,2,0,7};
    vecf<22> b3= {2,3,1,7,6,7,4,0,6,0,7,2,6,1,1,0,6,8,8,4,3,5};
    float e3 = 360;
    auto r3 = dot(a3, b3);
    assert((r3 == e3));
    vecf<32> a4= {7,5,1,4,0,0,7,8,3,5,0,1,1,5,3,8,8,5,4,0,8,2,6,8,6,3,0,2,8,8,4,6};
    vecf<32> b4= {8,2,6,4,5,6,0,8,2,1,6,5,4,5,1,2,4,0,5,8,5,7,5,2,1,3,1,0,3,2,5,7};
    float e4 = 485;
    auto r4 = dot(a4, b4);
    assert((r4 == e4));
}
void test_vector_multiplication() {
    vecf<2> a0= {0,3};
    vecf<2> b0= {3,6};
    vecf<2> e0= { 0,18};
    auto r0 = a0 * b0;
    assert((r0 == e0));
    vecf<8> a1= {3,5,0,2,3,3,3,8};
    vecf<8> b1= {2,7,6,3,6,5,8,7};
    vecf<8> e1= { 6,35, 0, 6,18,15,24,56};
    auto r1 = a1 * b1;
    assert((r1 == e1));
    vecf<16> a2= {8,7,3,1,3,6,0,2,0,2,1,5,4,5,0,6};
    vecf<16> b2= {8,5,1,4,7,5,1,4,8,1,8,3,0,7,5,8};
    vecf<16> e2= {64,35, 3, 4,21,30, 0, 8, 0, 2, 8,15, 0,35, 0,48};
    auto r2 = a2 * b2;
    assert((r2 == e2));
    vecf<22> a3= {8,1,5,7,0,3,7,4,7,8,3,0,8,6,1,0,0,6,2,5,4,2};
    vecf<22> b3= {6,3,3,8,6,0,3,5,7,1,6,1,1,8,3,8,2,7,6,4,4,2};
    vecf<22> e3= {48, 3,15,56, 0, 0,21,20,49, 8,18, 0, 8,48, 3, 0, 0,42,12,20,16, 4};
    auto r3 = a3 * b3;
    assert((r3 == e3));
    vecf<32> a4= {8,1,8,8,7,5,6,5,0,5,3,7,1,2,8,7,4,5,0,2,2,0,2,2,7,0,5,4,5,2,5,4};
    vecf<32> b4= {2,7,2,8,1,8,2,1,2,2,3,8,2,7,2,2,2,5,4,5,6,6,0,5,1,0,6,1,8,3,0,8};
    vecf<32> e4= {16, 7,16,64, 7,40,12, 5, 0,10, 9,56, 2,14,16,14, 8,25, 0,10,12, 0, 0,10,
  7, 0,30, 4,40, 6, 0,32};
    auto r4 = a4 * b4;
    assert((r4 == e4));
}

int main() {
    EXECUTE_TEST(test_vector_comparisons);
    EXECUTE_TEST(test_vector_deep_copies);
    EXECUTE_TEST(test_vector_addition);
    EXECUTE_TEST(test_vector_substraction);
    EXECUTE_TEST(test_vector_length);
    EXECUTE_TEST(test_vector_dotproduct);
    EXECUTE_TEST(test_vector_multiplication);
}
